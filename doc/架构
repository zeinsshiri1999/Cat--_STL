
基础架构设计
采用模块化设计，将各个组件解耦
使用现代C++特性(C++11/14/17/20)
考虑跨平台兼容性
提供清晰的接口文档
可能的创新点：
内存管理优化
实现更智能的内存池
支持内存碎片整理
提供内存使用统计和监控
支持自定义内存分配策略
容器优化
针对特定场景的专用容器
支持并发安全的容器变体
提供更多数据结构的实现(如跳表、布隆过滤器等)
容器性能监控和调优工具
算法优化
并行算法支持
针对特定数据特征的优化算法
提供更多实用算法
算法性能分析工具
工具支持
调试工具
性能分析工具
内存泄漏检测
线程安全检查
开发步骤建议：
1) 先实现基础组件(内存分配器、迭代器等)
2) 实现核心容器(vector、list、map等)
3) 实现基础算法
4) 添加创新特性
5) 进行性能测试和优化
6) 完善文档和示例

内碎片（Internal Fragmentation）
概念
当你向系统 malloc 要分配一块内存，例如请求 17 字节，但操作系统或运行时为了对齐、管理方便，会把它“向上取整”到某个粒度，比如 32 字节；剩下的 15 字节就浪费掉，属于“内碎片”。

原因

对齐要求：多数平台要求内存块至少 8、16、32 字节对齐；

外碎片（External Fragmentation）
概念
堆上有很多被分配和释放的内存块，当它们以不规则的大小、位置反复申请／释放后，空闲的内存就会“支离破碎”，形成很多小块零散的空穴
频繁的小块分配和释放，使得空闲块在堆上随机分布，无法拼凑成大块，也就出现了外碎片

//内存池：
//申请：
2）减少内存碎片：内存碎片产生的主要原因是：内存空隙无法对齐；规定只能分配align的倍数字节块，使得大的内存页释放时，不会因为内存对齐产生碎片；
1）减少syscall开销：一次申请大内存，首次分配直接从内存池分配，因为是连续分配的，所以从分配那一刻就决定了块的大小不能改变，再引入空闲链表，记录回收的align倍数的字节快，这些都在用户态完成；空间换时间：提前批量申请，分出多块满足链表空缺，减少系统调用

快速掌握思路，然后抄，然后优化

1）需求精确
2）实现思路：数据模型，如何操作数据
3）写接口，写实现


需求和实现思路很简单：
1）先考虑实体类的数据模型：类型，数据，getter and setter
2）然后功能就是如何操作数据，放在方法类中，方法类就先定义兼容SGI规范的功能接口，实现放在后续
3）然后就是优化：鲁棒性，性能，多态性，线程安全性


// 实体类：
1）要有头尾，容量指针vector
2）维护大小，容量计算属性
3）getter，setter
4）构造，析构，要分配内存，记录指针，赋值初始化；注销指针；销毁内存

// 接口类：
1）获取迭代器（begin，end，rbegin，rend）
2）增删改查（push_back，pop_back，insert，erase，clear）
3）容量操作（reserve，resize，shrink_to_fit）

//实现类
4）构造，析构，赋值，移动


基本需求和实现思路：
---------------------------
1）默认分配器
实体类：
接口：异常安全的allocate/deallocate:封装malloc和free

2）pool分配器
实体类：内存池头尾指针，空闲内存块头指针数组，内存池初始化，内存池销毁
接口：
分配器：取出所需空闲内存，空闲链表填充，内存池扩展
释放器：挂回空闲链表指针数组

-----------------------------
容器
1）vector
实体类：头指针，容量指针，大小指针
接口：

--------------------------------
类型系统
实体类：
模式枚举：高性能，安全
traits：控制模式泛型参数，在编译期生成不同类型别名定义（高性能/安全类型）；继承traits时，自动生成对应模式类型别名

接口：

----------------------------
异常系统
实体类：msg
接口：打印msg和异常类型，以及抛出位置时间？

-------------------------
适配器
实体类：
接口：

-------------------------
算法 
实体类：
接口：

--------------------------
迭代器
实体类：
接口：

----------------------------
仿函数
实体类：
接口：


----------------------------

性能优化需求：
1）CRTP静态接口
2）constexpr编译期计算


安全优化需求：
1）线程安全由调用方保证
2）nodiscard防止悬垂指针和句柄造成的内存泄漏
3）编译期断言static_assert进行模板参数检查





